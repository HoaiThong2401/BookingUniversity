@page "/EditBooking/{BookingId:int}"
@using Repositories.Entities
@using Repositories.ViewModel
@using Services.IService
@inject NavigationManager NavigationManager
@inject IBookingService BookingService
@inject ISlotService SlotService
@inject IRoomService RoomService

<h3 class="text-center font-weight-bold">Update Your Booking</h3>

<EditForm Model="booking" OnSubmit="GoToUpdateBookingDetail" FormName="bookingForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <table class="table table-bordered mt-4">
        <thead>
            <tr>
                <th class="text-center">No</th>
                <th class="text-center">Booking ID</th>
                <th class="text-center">Booking Status</th>
                <th class="text-center">Booking Detail ID</th>
                <th class="text-center">Booking Date</th>
                <th class="text-center">Slot</th>
                <th class="text-center">Room</th>
                <th class="text-center">Reason</th>
                <th class="text-center">Booking Detail Status</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < booking.BookingDetails.Count; i++)
            {
                <tr class="align-middle text-center">
                    <td>@(i + 1)</td>
                    <td>@booking.BookingId</td>
                    <td>@GetStatusText(booking.Status)</td>
                    <td>@booking.BookingDetails[i].Id</td>
                    <td>
                        <InputDate class="form-control"
                                   @bind-Value="booking.BookingDetails[i].BookingDate" />
                    </td>
                    <td>
                        <InputSelect class="form-control"
                                     @bind-Value="booking.BookingDetails[i].SlotId">
                            <option value="">Select Slot</option>
                            @foreach (var slot in slots)
                            {
                                <option value="@slot.Id">@slot.Id</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputSelect class="form-control"
                                     @bind-Value="booking.BookingDetails[i].RoomId">
                            <option value="">Select Room</option>
                            @foreach (var room in rooms)
                            {
                                <option value="@room.Id">@room.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td>
                        <InputText class="form-control"
                                   @bind-Value="booking.BookingDetails[i].Reason"
                                   placeholder="Enter Booking Reason" />
                    </td>
                    <td>@GetStatusText(booking.BookingDetails[i].Status)</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between">
        <a href="/ListBooking" class="btn-back-to-list mt-3">
            Back to List
        </a>

        <button class="btn btn-update mt-3" type="submit">
            Update
        </button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(saveMessage))
{
    <div class="alert @alertClass mt-3">
        @saveMessage
    </div>
}

<style>
    .btn-back-to-list,
    .btn-update {
        display: inline-block;
        padding: 10px 20px;
        background-color: #6a5acd;
        color: white;
        font-weight: bold;
        text-align: center;
        border-radius: 5px;
        text-decoration: none;
        transition: opacity 0.3s ease, background-color 0.3s ease;
        cursor: pointer;
    }

        .btn-back-to-list:hover,
        .btn-update:hover {
            background-color: #5b4a9a;
            opacity: 0.8;
        }

        .btn-back-to-list:active,
        .btn-update:active {
            background-color: #4d3c82;
            opacity: 0.6;
        }
</style>

@code {
    [Parameter]
    public int BookingId { get; set; }

    private BookingModel booking;
    private List<Slot> slots = new();
    private List<Room> rooms = new();
    private string saveMessage = string.Empty;
    private string alertClass = string.Empty;

    protected override void OnInitialized()
    {
        try
        {
            slots = SlotService.GetSlots();
            rooms = RoomService.GetRooms();
            booking = BookingService.GetBookingById(BookingId);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading booking: " + ex.Message);
        }
    }

    private void GoToUpdateBookingDetail()
    {
        try
        {
            var bookingEntity = new BookingModel
                {
                    BookingId = booking.BookingId,
                    Status = booking.Status,
                    UserId = booking.UserId,
                    UserName = booking.UserName,
                    DepartmentId = booking.DepartmentId,
                    CampusId = booking.CampusId,
                    BookingDetails = booking.BookingDetails.Select(bd => new BookingDetailViewModel
                    {
                        Id = bd.Id,
                        BookingDate = bd.BookingDate,
                        SlotId = bd.SlotId,
                        RoomId = bd.RoomId,
                        Reason = bd.Reason,
                        Status = bd.Status
                    }).ToList()
                };

            Console.WriteLine($"{bookingEntity}");
            BookingService.UpdateBooking(bookingEntity);

            saveMessage = "Booking updated successfully!";
            alertClass = "alert-success";
        }
        catch (Exception ex)
        {
            saveMessage = "Failed to update the booking.";
            alertClass = "alert-danger";
            Console.WriteLine("Update error: " + ex.Message);
        }
    }

    private string GetStatusText(int status)
    {
        return status switch
        {
            0 => "Processing",
            1 => "Approved",
            2 => "Canceled",
            _ => "Unknown"
        };
    }
}

